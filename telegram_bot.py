import asyncio
import logging
import time
import config

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ParseMode, CallbackQuery
from aiogram.utils.markdown import hlink
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import LabeledPrice
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.storage import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage


from userid_database import SQLDatabase

from datetime import datetime, timedelta

# –∫–æ–º–∞–Ω–¥—ã:
#     /start
#     /othermessage
#     /sendall
#     /info
#     /buyVIP
#     /buySTANDARD

#–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---------------------------------------------------------------------------------

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token = config.bot_token)
dp = Dispatcher(bot, storage=MemoryStorage())
status = True

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = SQLDatabase('userid_db.db')

#–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---------------------------------------------------------------------------------

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------------------------------------------------------------------

#13 –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
know_more_keyboard = InlineKeyboardMarkup()
button12 = InlineKeyboardButton("STANDARD", callback_data = "know_more_STANDARD")
button13 = InlineKeyboardButton("VIP", callback_data = "know_more_VIP")
know_more_keyboard.add(button12,button13)

#1 –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ VIP STANDARD
ticket_keyboard = InlineKeyboardMarkup()
button1 = KeyboardButton('–ë–µ—Ä—É VIP', callback_data="buy_VIP_ticket")
button2 = KeyboardButton('–ë–µ—Ä—É Standard', callback_data="buy_STANDARD_ticket")
ticket_keyboard.add(button1, button2)

#2 –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ STANDARD
STANDARD_keyboard = InlineKeyboardMarkup()
STANDARD_keyboard.add(button2, button13)

#3 –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ VIP
VIP_keyboard = InlineKeyboardMarkup()
VIP_keyboard.add(button1)

#4 –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ how
how_keyboard = InlineKeyboardMarkup()
button3 = InlineKeyboardButton('–ö–∞–∫? üò≥', callback_data = 'how')
how_keyboard.add(button3)

#5 –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∑–Ω–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–µ–µ
more_info_keyboard = InlineKeyboardMarkup()
button4 = InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å', callback_data ='more_info')
more_info_keyboard.add(button4)

#6 –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∑–Ω–∞—Ç—å –ø—Ä–æ –ø—Ä–∏–∑—ã
know_about_prizes_keyboard = InlineKeyboardMarkup()
button5 = InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –ø—Ä–æ –ø—Ä–∏–∑—ã', callback_data = 'know_about_prizes')
know_about_prizes_keyboard.add(button5)

#7 –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±—Ä–∞—Ç—å
choose_keyboard = InlineKeyboardMarkup()
button6 = InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å', callback_data = 'choose')
choose_keyboard.add(button6)

#8 –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ what more
what_more_keyboard = InlineKeyboardMarkup()
button7 = InlineKeyboardButton('–ß—Ç–æ –µ—â–µ?', callback_data = 'what_more')
what_more_keyboard.add(button7)

#9 –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ö–æ—á—É —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å
wanna_participate_keyboard = InlineKeyboardMarkup()
button8 = InlineKeyboardButton("–•–æ—á—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å",callback_data = 'wanna_participate')
wanna_participate_keyboard.add(button8)

#10 –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ó–∞–±—Ä–∞—Ç—å
get_prize_keyboard = InlineKeyboardMarkup()
button9 = InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å", callback_data = 'get_prize')
get_prize_keyboard.add(button9)

#11 –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ pre_register
pre_register_keyboard = InlineKeyboardMarkup()
button10 = InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω—è—é", callback_data = "pre_register")
pre_register_keyboard.add(button10)

#12 –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ó–∞–ø–æ–ª–Ω—è—é!
register_keyboard = InlineKeyboardMarkup()
button11 = InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω—è—é!", callback_data = "register")
register_keyboard.add(button11)

#14 –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
success_keyboard = InlineKeyboardMarkup()
button14 = InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å", callback_data="success")
success_keyboard.add(button14)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã--------------------------------------------------------------------------------

#–ê–π–¥–∏ –∞–¥–º–∏–Ω–∞
admin_id = 366254199

#–°–æ–æ–±—â–µ–Ω–∏—è ---------------------------------------------------------------------------------

#–í–µ–±—Ö—É–∫-------------------------------------------------------------------------------------

async def on_startup(dp):
    await bot.set_webhook(config.URL_APP)

async def on_shutdown(dp):
    await bot.delete_webhook()
    
#–í–µ–±—Ö—É–∫-------------------------------------------------------------------------------------

#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-------------------------------------------------------------------
class user_add(StatesGroup):
    name = State()
    phone_number = State()
    telegram_id = State()

#–î–æ–±–∞–≤–∏—Ç—å –§–ò–û
@dp.message_handler(state = user_add.name)
async def add_name(message: types.Message, state = FSMContext):
    print("add_name")
    await state.finish()
    if len(message.text.split()) <3:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ", parse_mode=ParseMode.MARKDOWN)
        await user_add.name.set()
    else:
        db.add_name(message.text, message.from_user.id)
        await bot.send_message(message.chat.id, config.third_text, parse_mode=ParseMode.MARKDOWN)
        await user_add.phone_number.set()

#–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä
@dp.message_handler(state = user_add.phone_number)
async def add_phone_number(message: types.Message, state = FSMContext):
    print("add_phone")
    await state.finish()
    if 11>len(list(message.text)) <17:  
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n 89997776655", parse_mode=ParseMode.MARKDOWN)
        await user_add.phone_number.set()   
    else:
        db.add_phone_number(message.text, message.from_user.id)
        await bot.send_message(message.chat.id, config.fourth_text, parse_mode=ParseMode.MARKDOWN)
        await user_add.telegram_id.set()

#–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏  
@dp.message_handler(state = user_add.telegram_id)
async def add_telegram_id(message: types.Message, state = FSMContext):
    print("add_telegram_id")
    await state.finish()
    db.add_telegram_id(message.text, message.from_user.id)
    await bot.send_message(message.chat.id, config.ninth_text, reply_markup = more_info_keyboard, parse_mode = ParseMode.MARKDOWN)


#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-------------------------------------------------------------------

#–û–ø–ª–∞—Ç–∞-------------------------------------------------------------------------------------

#buy vip callback 
@dp.callback_query_handler(text_contains = "buy_VIP_ticket")
async def buyVIP(call: CallbackQuery):
    message_chat_id = call["from"]["id"]
    if config.payments_token.split(':')[1] == 'TEST':
        await bot.send_message(message_chat_id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")
    prices = [LabeledPrice(label='VIP –±–∏–ª–µ—Ç', amount=250000)]
    await bot.send_invoice(
        chat_id=message_chat_id,
        title='–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ VIP',                                        
        description="""–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–±—Ä–∞—Ç—å:              
1 - Changan UNI-V                                        
4 - iPhone 14                                            
10 - –ü–æ–¥–∞—Ä-—Ö –∫–∞—Ä—Ç ¬´–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ¬ª  10 000               
30 - –ü–æ–¥–∞—Ä-—Ö –±–æ–∫—Å–æ–≤ ¬´TITANMAN¬ª
""",
        provider_token=config.payments_token,
        currency='rub',
        prices=prices,
        start_parameter='buyticket',
        payload=str(message_chat_id)
    )
    
#buy STANDARD callback 
@dp.callback_query_handler(text_contains = "buy_STANDARD_ticket")
async def buy(call: CallbackQuery):
    message_chat_id = call["from"]["id"]
    if config.payments_token.split(':')[1] == 'TEST':
        await bot.send_message(message_chat_id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")
    prices = [LabeledPrice(label='VIP –±–∏–ª–µ—Ç', amount=100000)]
    await bot.send_invoice(
        chat_id=message_chat_id,
        title='STANDARD',
        description='–ì–∞–π–¥ ¬´–ù–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —É—Å–ø–µ—Ö—É¬ª\n –£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ  –∞–≤—Ç–æ–º–æ–±–∏–ª—è Changan UNI-V',
        provider_token=config.payments_token,
        currency='rub',
        prices=prices,
        start_parameter='buyticket',
        payload=str(message_chat_id)
    )
#–û–ø–ª–∞—Ç–∞-------------------------------------------------------------------------------------

#—Å—Ç–∞—Ä—Ç
@dp.message_handler(commands = ['start'])
async def start(message: types.Message):
    if (db.user_exists(message.from_user.id)):
        print("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        pass
    else:
        print("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è")
        db.add_user(message.from_user.id)
        print("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")  
        await bot.send_message(message.from_user.id, config.first_text, reply_markup=how_keyboard , parse_mode=ParseMode.MARKDOWN)

#how callback
@dp.callback_query_handler(text_contains = "how")
async def how(call: CallbackQuery):
    message_chat_id = call["from"]["id"]
    photo = open('images/first_image.png', 'rb')
    await bot.send_photo(message_chat_id, photo = photo, caption = config.first_first_text, reply_markup = what_more_keyboard, parse_mode=ParseMode.MARKDOWN)

#what_more callback
@dp.callback_query_handler(text_contains = "what_more")
async def what_more(call: CallbackQuery):
    message_chat_id = call["from"]["id"]
    await bot.send_message(message_chat_id, config.first_second_text, reply_markup = wanna_participate_keyboard, parse_mode=ParseMode.MARKDOWN) 

#wanna_participate callback
@dp.callback_query_handler(text_contains = "wanna_participate")
async def wanna_participate(call: CallbackQuery):
    message_chat_id = call["from"]["id"]
    await bot.send_message(message_chat_id, config.first_third_text, reply_markup=get_prize_keyboard,  parse_mode=ParseMode.MARKDOWN)

#get_prize callback
@dp.callback_query_handler(text_contains = "get_prize")
async def get_prize(call: CallbackQuery):
    message_chat_id = call["from"]["id"]
    #with open (videos/first_video, "rb") as video:
    #    await bot.send_video(message_chat_id, config.first_fourth_text, video = video, reply_markup=get_prize)
    photo = open("images/first_image.png", "rb")
    await bot.send_photo(message_chat_id, photo = photo, caption = config.first_fifth_text, parse_mode=ParseMode.MARKDOWN)  
    
    await bot.send_message(message_chat_id, config.first_sixth_text, reply_markup=pre_register_keyboard,  parse_mode=ParseMode.MARKDOWN)

#pre_register callback
@dp.callback_query_handler(text_contains = "pre_register")
async def pre_register(call: CallbackQuery):
    message_chat_id = call["from"]["id"]
    await bot.send_message(message_chat_id, config.first_seventh_text, reply_markup=register_keyboard,  parse_mode=ParseMode.MARKDOWN)
#register callback
@dp.callback_query_handler(text_contains = "register")
async def register(call: CallbackQuery):
    message_chat_id = call["from"]["id"]
    await bot.send_message(message_chat_id, config.second_text, parse_mode=ParseMode.MARKDOWN)
    await user_add.name.set()
    
#–¢–∞—Ä–∏—Ñ—ã –±–æ—Ç–∞
@dp.callback_query_handler(text_contains = "more_info") 
async def more_info(call: CallbackQuery):
    message_chat_id = call["from"]["id"]
    await bot.send_message(message_chat_id, config.fifth_text, reply_markup = know_more_keyboard, parse_mode=ParseMode.MARKDOWN)
    
#—Ç–∞—Ä–∏—Ñ —Å—Ç–∏–∞–Ω–¥–∞—Ä—Ç
@dp.callback_query_handler(text_contains = "know_more_STANDARD")
async def know_more_STANDARD(call: CallbackQuery):
    message_chat_id = call["from"]["id"]
    photo = open("images/first_image.png", "rb")
    await bot.send_photo(message_chat_id, photo = photo, caption = config.seventh_text, reply_markup = STANDARD_keyboard, parse_mode=ParseMode.MARKDOWN)

    
#—Ç–∞—Ä–∏—Ñ –≤–∏–ø
@dp.callback_query_handler(text_contains = "know_more_VIP")
async def know_more_VIP(call: CallbackQuery):
    message_chat_id = call["from"]["id"]
    photo = open("images/first_image.png", "rb")
    await bot.send_photo(message_chat_id, photo = photo, caption = config.eighth_text, reply_markup = VIP_keyboard, parse_mode=ParseMode.MARKDOWN)

#–í—ã–¥–∞—á–∞ –≥–∞–π–¥–∞
@dp.callback_query_handler(text_contains = "success")
async def give_guidecall(call: CallbackQuery):
    message_chat_id = call["from"]["id"]
    #–í—ã–¥–∞—á–∞ –≥–∞–π–¥–∞
    await bot.send_message(message_chat_id, f"""31 –¥–µ–∫–∞–±—Ä—è 2023 –≥–æ–¥–∞ —É –Ω–∞—Å –±—É–¥–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —Å—Ä–µ–¥–∏ —Ç–µ—Ö, –∫—Ç–æ –∫—É–ø–∏–ª –Ω–∞—à –≥–∞–π–¥, –∏ –≤–æ—Ç —Ç–≤–æ–π –Ω–æ–º–µ—Ä: {message_chat_id}.

–ù–µ –ø–æ—Ç–µ—Ä—è–π –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –¥–µ–Ω—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è CHANGAN UNI-V.

*–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É, –ø—Ä–µ–¥–ª–æ–∂–∏ –¥—Ä—É–≥—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å –µ–º—É —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç –∏–ª–∏ –∫—É–ø–∏ –µ—â–µ –æ–¥–∏–Ω –≤ –ø–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥—É –∏ –∂–¥–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–æ–º –¥–µ–Ω—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞.*
""", parse_mode=ParseMode.MARKDOWN)
    
#–†–∞—Å—Å—ã–ª–∫–∞
@dp.message_handler(commands = ['sendall'])
async def send_all(message: types.message):
    if message.chat.id == admin_id:
        for i in db.get_users(1):
            print(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {i[1]}")
            await bot.send_message(i[1],sendall_text)
            await asyncio.sleep(0.3)
        await message.answer('–ì–æ—Ç–æ–≤–æ')
    else:
        await message.answer('–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n–ª–∏–±–æ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
    
@dp.callback_query_handler(text_contains = "ticket:amount")
async def ticketamount(call: CallbackQuery):
    message_chat_id = call["from"]["id"]
    await bot.send_message(message_chat_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö VIP –±–∏–ª–µ—Ç–æ–≤: {db.get_tickets(message_chat_id)[0][5]} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ : {db.get_tickets(message_chat_id)[0][6]}")

        
#–°–æ–æ–±—â–µ–Ω–∏—è ---------------------------------------------------------------------------------

#–ë–∏–ª–µ—Ç—ã ------------------------------------------------------------------------------------
 
#–ü–æ–ª—É—á–∏—Ç—å VIP –±–∏–ª–µ—Ç
@dp.message_handler(commands = ['buyVIP'])
async def buyVIP(message: types.message):
    db.add_VIP_ticket(message.chat.id)
    photo = open("images/first_image.png", "rb")
    await bot.send_photo(message.chat.id, photo = photo, caption = config.twelve_text, reply_markup = success_keyboard, parse_mode=ParseMode.MARKDOWN)
    
#–ü–æ–ª—É—á–∏—Ç—å STANDARD –±–∏–ª–µ—Ç
@dp.message_handler(commands = ['buySTANDARD'])
async def buyVIP(message: types.message):
    db.add_STANDARD_ticket(message.chat.id)
    photo = open("images/first_image.png", "rb")
    await bot.send_photo(message.chat.id, photo = photo,caption = config.twelve_text, reply_markup = success_keyboard, parse_mode=ParseMode.MARKDOWN)

#–ë–∏–ª–µ—Ç—ã ------------------------------------------------------------------------------------

#–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---------------------------------------------------------------------------   

#main function
async def main():
    logging.basicConfig(level = logging.INFO)
    await dp.start_polling(bot)
    await dp.start_webhook(
        dispatcher = dp,
        webhook_path = "",
        on_startup = on_startup,
        on_shutdown = on_shutdown,
        skip_updates = True,
        host = "0.0.0.0",
        port = int(os.environ.get("PORT",5000)
        )
    )

if __name__ == "__main__":
    db.create_table1()
    db.create_table2()
    asyncio.run(main())
    
#–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---------------------------------------------------------------------------   
